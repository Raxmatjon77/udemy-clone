// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum MediaType {
  VIDEO
  IMAGE
  DOCUMENT
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  profilePicture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at") @default(now()) 
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)
  courses       Course[]       @relation("CourseAuthor")
  enrollments   Enrollment[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  stars         Star[]
  comments      Comment[]
  progress      Progress[]
  notifications Notification[]
  Upload        Upload[]

  @@index([email], name: "user_email_idx")
  @@unique(map: "user_email_uq", fields: [email])
  @@map("user")
}

model Course {
  id          String       @id @default(uuid())
  title       String
  slug        String       @unique
  desc        String
  price       Float
  thumbnail   String
  image       String?
  isPublished Boolean      @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at") @default(now()) 
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)
  authorId    String
  author      User         @relation("CourseAuthor", fields: [authorId], references: [id])
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  sections    Section[]
  enrollments Enrollment[]
  reviews     Review[]
  stars       Star[]
}

model Section {
  id       String   @id @default(uuid())
  courseId String
  title    String
  order    Int
  lessons  Lesson[]

  course Course @relation(fields: [courseId], references: [id])
}

model Lesson {
  id          String     @id @default(uuid())
  sectionId   String
  section     Section    @relation(fields: [sectionId], references: [id])
  title       String
  videoUrl    String
  order       Int
  freePreview Boolean    @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at") @default(now()) 
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)
  comments    Comment[]
  Progress    Progress[]

@@map("lesson")
  @@index([sectionId], name: "lesson_section_idx")
  @@index([title], name: "lesson_title_idx")
  @@unique([sectionId, order], name: "lesson_section_order_uq")
  @@unique([sectionId, title], name: "lesson_section_title_uq")
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])

  @@index([userId], name: "enrollment_user_idx")
  @@index([courseId], name: "enrollment_course_idx")
  @@unique([userId, courseId], name: "enrollment_user_course_uq")
  @@map("enrollment")

}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at") @default(now()) 
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])


@@map("review")
}

model Category {
  id      String   @id @default(uuid())
  name    String   
  slug    String   @unique
  image   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at") @default(now()) 
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)
  courses Course[]

  @@index([name], name: "category_slug_uq")
  @@map("category")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String?
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId,id], name: "refresh_token_user_uq")

}

model Star {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  lessonId  String
  userId    String
  content   String
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Upload {
  id         String    @id @default(uuid())
  url        String
  MediaType       MediaType
  type       String
  uploadedBy String
  user       User      @relation(fields: [uploadedBy], references: [id])
  createdAt  DateTime  @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  body      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
